// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"
)

const countCompletedOrdersByProviderID = `-- name: CountCompletedOrdersByProviderID :one
SELECT COUNT(*)
FROM orders
WHERE seller_id = $1
  AND status_id = (SELECT id FROM order_status WHERE code = 'completed')
`

func (q *Queries) CountCompletedOrdersByProviderID(ctx context.Context, sellerID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCompletedOrdersByProviderID, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (uuid, buyer_id, seller_id, status_id, payment_method)
VALUES ($1, $2, $3, $4, $5) RETURNING uuid, buyer_id, seller_id, status_id, payment_method, grand_total, created_at
`

type CreateOrderParams struct {
	UUID          string `json:"uuid"`
	BuyerID       int32  `json:"buyer_id"`
	SellerID      int32  `json:"seller_id"`
	StatusID      int32  `json:"status_id"`
	PaymentMethod string `json:"payment_method"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UUID,
		arg.BuyerID,
		arg.SellerID,
		arg.StatusID,
		arg.PaymentMethod,
	)
	var i Order
	err := row.Scan(
		&i.UUID,
		&i.BuyerID,
		&i.SellerID,
		&i.StatusID,
		&i.PaymentMethod,
		&i.GrandTotal,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (uuid, order_id, service_id, quantity, sub_total)
VALUES ($1, $2, $3, $4, $5) RETURNING uuid, order_id, service_id, quantity, sub_total, created_at
`

type CreateOrderItemParams struct {
	UUID      string `json:"uuid"`
	OrderID   string `json:"order_id"`
	ServiceID int32  `json:"service_id"`
	Quantity  int32  `json:"quantity"`
	SubTotal  int32  `json:"sub_total"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.UUID,
		arg.OrderID,
		arg.ServiceID,
		arg.Quantity,
		arg.SubTotal,
	)
	var i OrderItem
	err := row.Scan(
		&i.UUID,
		&i.OrderID,
		&i.ServiceID,
		&i.Quantity,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItemDetails = `-- name: CreateOrderItemDetails :exec
INSERT INTO order_item_details (order_item_id, title, price, image_path)
VALUES ($1, $2, $3, $4)
`

type CreateOrderItemDetailsParams struct {
	OrderItemID string `json:"order_item_id"`
	Title       string `json:"title"`
	Price       int32  `json:"price"`
	ImagePath   string `json:"image_path"`
}

func (q *Queries) CreateOrderItemDetails(ctx context.Context, arg CreateOrderItemDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderItemDetails,
		arg.OrderItemID,
		arg.Title,
		arg.Price,
		arg.ImagePath,
	)
	return err
}

const getCompletedOrderItemsByCategoryID = `-- name: GetCompletedOrderItemsByCategoryID :many
SELECT oi.uuid,
       oi.order_id,
       oi.service_id,
       oi.quantity,
       oi.sub_total,
       oi.created_at
FROM order_items oi
         INNER JOIN services s ON s.id = oi.service_id
WHERE s.category_id = (SELECT id FROM categories WHERE categories.id = $1)
  AND oi.order_id IN (SELECT uuid FROM orders WHERE status_id = (SELECT id FROM order_status WHERE code = 'completed'))
`

func (q *Queries) GetCompletedOrderItemsByCategoryID(ctx context.Context, id int32) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedOrderItemsByCategoryID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.UUID,
			&i.OrderID,
			&i.ServiceID,
			&i.Quantity,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullOrderItemsInformationByOrderId = `-- name: GetFullOrderItemsInformationByOrderId :many
SELECT oi.uuid,
       oi.order_id,
       oi.service_id,
       oi.quantity,
       oid.title,
       oid.image_path,
       oid.price
FROM order_items oi
         INNER JOIN order_item_details oid ON oid.order_item_id = oi.uuid
WHERE oi.order_id = $1
`

type GetFullOrderItemsInformationByOrderIdRow struct {
	UUID      string `json:"uuid"`
	OrderID   string `json:"order_id"`
	ServiceID int32  `json:"service_id"`
	Quantity  int32  `json:"quantity"`
	Title     string `json:"title"`
	ImagePath string `json:"image_path"`
	Price     int32  `json:"price"`
}

func (q *Queries) GetFullOrderItemsInformationByOrderId(ctx context.Context, orderID string) ([]GetFullOrderItemsInformationByOrderIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrderItemsInformationByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFullOrderItemsInformationByOrderIdRow{}
	for rows.Next() {
		var i GetFullOrderItemsInformationByOrderIdRow
		if err := rows.Scan(
			&i.UUID,
			&i.OrderID,
			&i.ServiceID,
			&i.Quantity,
			&i.Title,
			&i.ImagePath,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByOrderItemID = `-- name: GetOrderByOrderItemID :one
SELECT uuid, buyer_id, seller_id, status_id, payment_method, grand_total, created_at
FROM orders
WHERE uuid = (SELECT order_id
              FROM order_items
              WHERE order_items.uuid = $1)
`

func (q *Queries) GetOrderByOrderItemID(ctx context.Context, uuid string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByOrderItemID, uuid)
	var i Order
	err := row.Scan(
		&i.UUID,
		&i.BuyerID,
		&i.SellerID,
		&i.StatusID,
		&i.PaymentMethod,
		&i.GrandTotal,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderStatuses = `-- name: GetOrderStatuses :many
SELECT id, code, detail
FROM order_status
ORDER BY id ASC
`

func (q *Queries) GetOrderStatuses(ctx context.Context) ([]OrderStatus, error) {
	rows, err := q.db.QueryContext(ctx, getOrderStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderStatus{}
	for rows.Next() {
		var i OrderStatus
		if err := rows.Scan(&i.ID, &i.Code, &i.Detail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurchaseOrders = `-- name: GetPurchaseOrders :many
SELECT o.uuid,
       o.buyer_id,
       o.seller_id,
       o.status_id,
       o.payment_method,
       o.grand_total,
       o.created_at,
       os.id,
       os.code,
       os.detail as status_detail
FROM orders AS o
         INNER JOIN order_status os ON os.id = o.status_id
WHERE buyer_id = $1
ORDER BY created_at
`

type GetPurchaseOrdersRow struct {
	UUID          string    `json:"uuid"`
	BuyerID       int32     `json:"buyer_id"`
	SellerID      int32     `json:"seller_id"`
	StatusID      int32     `json:"status_id"`
	PaymentMethod string    `json:"payment_method"`
	GrandTotal    int32     `json:"grand_total"`
	CreatedAt     time.Time `json:"created_at"`
	ID            int32     `json:"id"`
	Code          string    `json:"code"`
	StatusDetail  string    `json:"status_detail"`
}

func (q *Queries) GetPurchaseOrders(ctx context.Context, buyerID int32) ([]GetPurchaseOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPurchaseOrders, buyerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPurchaseOrdersRow{}
	for rows.Next() {
		var i GetPurchaseOrdersRow
		if err := rows.Scan(
			&i.UUID,
			&i.BuyerID,
			&i.SellerID,
			&i.StatusID,
			&i.PaymentMethod,
			&i.GrandTotal,
			&i.CreatedAt,
			&i.ID,
			&i.Code,
			&i.StatusDetail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurchaseOrdersWithStatusCode = `-- name: GetPurchaseOrdersWithStatusCode :many
SELECT o.uuid,
       o.buyer_id,
       o.seller_id,
       o.status_id,
       o.payment_method,
       o.grand_total,
       o.created_at,
       os.id,
       os.code,
       os.detail as status_detail
FROM orders AS o
         INNER JOIN order_status os ON os.id = o.status_id
WHERE o.buyer_id = $1
  AND os.code = $2
ORDER BY created_at
`

type GetPurchaseOrdersWithStatusCodeParams struct {
	BuyerID int32  `json:"buyer_id"`
	Code    string `json:"code"`
}

type GetPurchaseOrdersWithStatusCodeRow struct {
	UUID          string    `json:"uuid"`
	BuyerID       int32     `json:"buyer_id"`
	SellerID      int32     `json:"seller_id"`
	StatusID      int32     `json:"status_id"`
	PaymentMethod string    `json:"payment_method"`
	GrandTotal    int32     `json:"grand_total"`
	CreatedAt     time.Time `json:"created_at"`
	ID            int32     `json:"id"`
	Code          string    `json:"code"`
	StatusDetail  string    `json:"status_detail"`
}

func (q *Queries) GetPurchaseOrdersWithStatusCode(ctx context.Context, arg GetPurchaseOrdersWithStatusCodeParams) ([]GetPurchaseOrdersWithStatusCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getPurchaseOrdersWithStatusCode, arg.BuyerID, arg.Code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPurchaseOrdersWithStatusCodeRow{}
	for rows.Next() {
		var i GetPurchaseOrdersWithStatusCodeRow
		if err := rows.Scan(
			&i.UUID,
			&i.BuyerID,
			&i.SellerID,
			&i.StatusID,
			&i.PaymentMethod,
			&i.GrandTotal,
			&i.CreatedAt,
			&i.ID,
			&i.Code,
			&i.StatusDetail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSellOrders = `-- name: GetSellOrders :many
SELECT o.uuid,
       o.buyer_id,
       o.seller_id,
       o.status_id,
       o.payment_method,
       o.grand_total,
       o.created_at,
       os.id,
       os.code,
       os.detail as status_detail
FROM orders AS o
         INNER JOIN order_status os ON os.id = o.status_id
WHERE seller_id = $1
ORDER BY created_at
`

type GetSellOrdersRow struct {
	UUID          string    `json:"uuid"`
	BuyerID       int32     `json:"buyer_id"`
	SellerID      int32     `json:"seller_id"`
	StatusID      int32     `json:"status_id"`
	PaymentMethod string    `json:"payment_method"`
	GrandTotal    int32     `json:"grand_total"`
	CreatedAt     time.Time `json:"created_at"`
	ID            int32     `json:"id"`
	Code          string    `json:"code"`
	StatusDetail  string    `json:"status_detail"`
}

func (q *Queries) GetSellOrders(ctx context.Context, sellerID int32) ([]GetSellOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSellOrders, sellerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSellOrdersRow{}
	for rows.Next() {
		var i GetSellOrdersRow
		if err := rows.Scan(
			&i.UUID,
			&i.BuyerID,
			&i.SellerID,
			&i.StatusID,
			&i.PaymentMethod,
			&i.GrandTotal,
			&i.CreatedAt,
			&i.ID,
			&i.Code,
			&i.StatusDetail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSellOrdersWithStatusCode = `-- name: GetSellOrdersWithStatusCode :many
SELECT o.uuid,
       o.buyer_id,
       o.seller_id,
       o.status_id,
       o.payment_method,
       o.grand_total,
       o.created_at,
       os.id,
       os.code,
       os.detail as status_detail
FROM orders AS o
         INNER JOIN order_status os ON os.id = o.status_id
WHERE o.seller_id = $1
  AND os.code = $2
ORDER BY created_at
`

type GetSellOrdersWithStatusCodeParams struct {
	SellerID int32  `json:"seller_id"`
	Code     string `json:"code"`
}

type GetSellOrdersWithStatusCodeRow struct {
	UUID          string    `json:"uuid"`
	BuyerID       int32     `json:"buyer_id"`
	SellerID      int32     `json:"seller_id"`
	StatusID      int32     `json:"status_id"`
	PaymentMethod string    `json:"payment_method"`
	GrandTotal    int32     `json:"grand_total"`
	CreatedAt     time.Time `json:"created_at"`
	ID            int32     `json:"id"`
	Code          string    `json:"code"`
	StatusDetail  string    `json:"status_detail"`
}

func (q *Queries) GetSellOrdersWithStatusCode(ctx context.Context, arg GetSellOrdersWithStatusCodeParams) ([]GetSellOrdersWithStatusCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getSellOrdersWithStatusCode, arg.SellerID, arg.Code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSellOrdersWithStatusCodeRow{}
	for rows.Next() {
		var i GetSellOrdersWithStatusCodeRow
		if err := rows.Scan(
			&i.UUID,
			&i.BuyerID,
			&i.SellerID,
			&i.StatusID,
			&i.PaymentMethod,
			&i.GrandTotal,
			&i.CreatedAt,
			&i.ID,
			&i.Code,
			&i.StatusDetail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalRevenueByProviderID = `-- name: GetTotalRevenueByProviderID :one
SELECT SUM(grand_total)
FROM orders
WHERE seller_id = $1
  AND status_id = (SELECT id FROM order_status WHERE code = 'completed')
`

func (q *Queries) GetTotalRevenueByProviderID(ctx context.Context, sellerID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalRevenueByProviderID, sellerID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status_id = (SELECT id
                 FROM order_status
                 WHERE code = $1)
WHERE uuid = $2
`

type UpdateOrderStatusParams struct {
	Code string `json:"code"`
	UUID string `json:"uuid"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Code, arg.UUID)
	return err
}

const updateOrderTotal = `-- name: UpdateOrderTotal :exec
UPDATE orders
SET grand_total = $1
WHERE uuid = $2
`

type UpdateOrderTotalParams struct {
	GrandTotal int32  `json:"grand_total"`
	UUID       string `json:"uuid"`
}

func (q *Queries) UpdateOrderTotal(ctx context.Context, arg UpdateOrderTotalParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderTotal, arg.GrandTotal, arg.UUID)
	return err
}
