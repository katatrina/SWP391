// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: service_feedbacks.sql

package sqlc

import (
	"context"
)

const createServiceFeedback = `-- name: CreateServiceFeedback :exec
INSERT INTO service_feedbacks (service_id, user_id, content)
VALUES ($1, $2, $3)
`

type CreateServiceFeedbackParams struct {
	ServiceID int32  `json:"service_id"`
	UserID    int32  `json:"user_id"`
	Content   string `json:"content"`
}

func (q *Queries) CreateServiceFeedback(ctx context.Context, arg CreateServiceFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, createServiceFeedback, arg.ServiceID, arg.UserID, arg.Content)
	return err
}

const getFeedbacksByServiceID = `-- name: GetFeedbacksByServiceID :many
SELECT id, service_id, user_id, content, created_at
FROM service_feedbacks
WHERE service_id = $1
`

func (q *Queries) GetFeedbacksByServiceID(ctx context.Context, serviceID int32) ([]ServiceFeedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedbacksByServiceID, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceFeedback{}
	for rows.Next() {
		var i ServiceFeedback
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
