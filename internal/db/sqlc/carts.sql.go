// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: carts.sql

package sqlc

import (
	"context"
)

const addServiceToCart = `-- name: AddServiceToCart :exec
INSERT INTO cart_items (cart_id, service_id, quantity, sub_total)
VALUES ($1, $2, $3, $4)
`

type AddServiceToCartParams struct {
	CartID    int32 `json:"cart_id"`
	ServiceID int32 `json:"service_id"`
	Quantity  int32 `json:"quantity"`
	SubTotal  int32 `json:"sub_total"`
}

func (q *Queries) AddServiceToCart(ctx context.Context, arg AddServiceToCartParams) error {
	_, err := q.db.ExecContext(ctx, addServiceToCart,
		arg.CartID,
		arg.ServiceID,
		arg.Quantity,
		arg.SubTotal,
	)
	return err
}

const createCart = `-- name: CreateCart :exec
INSERT INTO carts (user_id)
VALUES ($1)
`

func (q *Queries) CreateCart(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, createCart, userID)
	return err
}

const getCartIDByUserId = `-- name: GetCartIDByUserId :one
SELECT id
FROM carts
WHERE user_id = $1
`

func (q *Queries) GetCartIDByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCartIDByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getCartItemByCartIDAndServiceID = `-- name: GetCartItemByCartIDAndServiceID :one
SELECT id, cart_id, service_id, quantity, sub_total
FROM cart_items
WHERE cart_id = $1
  AND service_id = $2
`

type GetCartItemByCartIDAndServiceIDParams struct {
	CartID    int32 `json:"cart_id"`
	ServiceID int32 `json:"service_id"`
}

func (q *Queries) GetCartItemByCartIDAndServiceID(ctx context.Context, arg GetCartItemByCartIDAndServiceIDParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItemByCartIDAndServiceID, arg.CartID, arg.ServiceID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ServiceID,
		&i.Quantity,
		&i.SubTotal,
	)
	return i, err
}

const isServiceAlreadyInCart = `-- name: IsServiceAlreadyInCart :one
SELECT EXISTS(SELECT 1
              FROM cart_items
              WHERE cart_id = $1
                AND service_id = $2)
`

type IsServiceAlreadyInCartParams struct {
	CartID    int32 `json:"cart_id"`
	ServiceID int32 `json:"service_id"`
}

func (q *Queries) IsServiceAlreadyInCart(ctx context.Context, arg IsServiceAlreadyInCartParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isServiceAlreadyInCart, arg.CartID, arg.ServiceID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items
SET quantity  = $1,
    sub_total = $2
WHERE cart_id = $3
  AND service_id = $4
`

type UpdateCartItemQuantityParams struct {
	Quantity  int32 `json:"quantity"`
	SubTotal  int32 `json:"sub_total"`
	CartID    int32 `json:"cart_id"`
	ServiceID int32 `json:"service_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateCartItemQuantity,
		arg.Quantity,
		arg.SubTotal,
		arg.CartID,
		arg.ServiceID,
	)
	return err
}
