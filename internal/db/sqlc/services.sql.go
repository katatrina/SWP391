// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: services.sql

package sqlc

import (
	"context"
)

const createService = `-- name: CreateService :exec
INSERT INTO services (title,
                      description,
                      price,
                      category_id,
                      thumbnail_url,
                      owned_by_user_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateServiceParams struct {
	Title         string `json:"title"`
	Description   string `json:"description"`
	Price         int32  `json:"price"`
	CategoryID    int32  `json:"category_id"`
	ThumbnailUrl  string `json:"thumbnail_url"`
	OwnedByUserID int32  `json:"owned_by_user_id"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) error {
	_, err := q.db.ExecContext(ctx, createService,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.CategoryID,
		arg.ThumbnailUrl,
		arg.OwnedByUserID,
	)
	return err
}

const getServicesByCategorySlug = `-- name: GetServicesByCategorySlug :many
SELECT id, title, description, price, category_id, thumbnail_url, owned_by_user_id, status, created_at
FROM services
WHERE category_id = (SELECT id FROM categories WHERE slug = $1)
`

func (q *Queries) GetServicesByCategorySlug(ctx context.Context, slug string) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServicesByCategorySlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.ThumbnailUrl,
			&i.OwnedByUserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceByProvider = `-- name: ListServiceByProvider :many
SELECT id, title, description, price, category_id, thumbnail_url, owned_by_user_id, status, created_at
FROM services
WHERE owned_by_user_id = $1
`

func (q *Queries) ListServiceByProvider(ctx context.Context, ownedByUserID int32) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServiceByProvider, ownedByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.ThumbnailUrl,
			&i.OwnedByUserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
